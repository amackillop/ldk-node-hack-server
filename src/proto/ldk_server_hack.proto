syntax = "proto3";
package ldk_server_hack;

message GetNodeInfoRequest {
}

message GetNodeInfoResponse {

  string public_key = 1;

  BestBlock current_best_block = 2;

  optional uint64 latest_wallet_sync_timestamp = 3;

  optional uint64 latest_onchain_wallet_sync_timestamp = 4;

  optional uint64 latest_fee_rate_cache_update_timestamp = 5;

  optional uint64 latest_rgs_snapshot_timestamp = 6;

  optional uint64  latest_node_announcement_broadcast_timestamp = 7;
}

message BestBlock {

  string block_hash = 1;

  uint32 height = 2;

}

// Retrieve a new on-chain/funding address.
message OnchainReceiveRequest {
}

message OnchainRecevieResponse {

  string address = 1;
}

// Send an on-chain payment to the given address.
message OnchainSendRequest {

  string address = 1;

  optional uint64 amount_sats = 2;
}

message OnchainSendResponse {

  string txid = 1;
}


// Return a BOLT11 invoice for the given amount, if specified.
message Bolt11ReceiveRequest {

  string description = 1;

  uint64 expiry_secs = 2;

  optional uint64 amount_msat = 3;
}


message Bolt11ReceiveResponse {

  string invoice = 1;
}

// Send a payment for a BOLT11 invoice.
message Bolt11SendRequest {

  string invoice = 1;

  optional uint64 amount_msat = 2;

}

message Bolt11SendResponse {

  PaymentId payment_id = 1;
}

// Return a BOLT12 offer for the given amount, if specified.
message Bolt12ReceiveRequest {

  string description = 1;

  optional uint64 amount_msat = 2;
}

message Bolt12ReceiveResponse {

  string offer = 1;
}

// Send a payment for a BOLT11 invoice.
message Bolt12SendRequest {

  string offer = 1;

  optional uint64 amount_msat = 2;

  optional string payer_note = 3;
}

message Bolt12SendResponse {

  PaymentId payment_id = 1;
}

// An identifier for making a payment.
message PaymentId {

  bytes data = 1;
}
